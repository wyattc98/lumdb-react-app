{"version":3,"sources":["logo.svg","movie.js","movieList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","_ref","movie","react_default","a","createElement","react_router_dom","to","concat","id","Poster","src","poster_path","alt","title","styled","img","_templateObject","MoviesList","state","movies","fetch","res","json","console","log","this","setState","results","_context","t0","MovieGrid","map","src_movie","key","Component","div","movieList_templateObject","MovieDetail","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","MovieDetail_templateObject","_templateObject2","App","className","logo","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gaCKxC,IAQeC,EAND,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,IAAAC,OAAMN,EAAMO,KAClBN,EAAAC,EAAAC,cAACK,EAAD,CAAQC,IAAG,GAAAH,OAJK,kCAILA,OAAmBN,EAAMU,aAAeC,IAAKX,EAAMY,UAYrDJ,EAASK,IAAOC,IAAVC,qLCWJC,6MA3BbC,MAAQ,CACNC,OAAQ,gOAIYC,MAChB,4LADIC,kBAGeA,EAAIC,cAAnBH,SACNI,QAAQC,IAAIL,GACZM,KAAKC,SAAS,CACZP,OAAQA,EAAOQ,4DAGjBJ,QAAQC,IAARI,EAAAC,iJAKF,OACE3B,EAAAC,EAAAC,cAAC0B,EAAD,KACGL,KAAKP,MAAMC,OAAOY,IAAI,SAAA9B,GAAK,OAAIC,EAAAC,EAAAC,cAAC4B,EAAD,CAAOC,IAAKhC,EAAMO,GAAIP,MAAOA,cAtB5CiC,aA8BnBJ,EAAYhB,IAAOqB,IAAVC,ubC7Bf,IAwCeC,6MApCbnB,MAAQ,CACNjB,MAAO,gOAIamB,MAAK,sCAAAb,OAEnBkB,KAAKa,MAAMC,MAAMC,OAAOhC,GAFL,2EAAjBa,kBAKcA,EAAIC,cAAlBrB,SACNwB,KAAKC,SAAS,CACZzB,4DAGFsB,QAAQC,IAARI,EAAAC,iJAIK,IACE5B,EAASwB,KAAKP,MAAdjB,MACT,OACEC,EAAAC,EAAAC,cAACqC,EAAD,CAAcC,SAAQ,GAAAnC,OAzBN,mCAyBMA,OAAqBN,EAAM0C,gBAC/CzC,EAAAC,EAAAC,cAACwC,EAAD,KACA1C,EAAAC,EAAAC,cAACK,EAAD,CAAQC,IAAG,GAAAH,OA5BC,kCA4BDA,OAAmBN,EAAMU,aAAeC,IAAKX,EAAMY,QAC9DX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAMY,OACXX,EAAAC,EAAAC,cAAA,SAAIH,EAAM4C,cACV3C,EAAAC,EAAAC,cAAA,UAAKH,EAAM6C,oBA7BOZ,aAuCpBO,EAAe3B,IAAOqB,IAAVY,IAGE,SAAAT,GAAK,OAAIA,EAAMI,WAI7BE,EAAY9B,IAAOqB,IAAVa,KC7BAC,EAhBH,kBACV/C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAK8C,UAAU,OACbhD,EAAAC,EAAAC,cAAA,UAAQ8C,UAAU,cAChBhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KACPJ,EAAAC,EAAAC,cAAA,OAAKM,IAAKyC,IAAMD,UAAU,WAAWtC,IAAI,WAG7CV,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjCf,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KAAK,OAAOC,UAAWlB,QCPlBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00ce4de3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ff9a163f.svg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n  <Link to={`/${movie.id}`}>\n    <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n  </Link>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  }),\n};\n\nexport const Poster = styled.img`\n  box-shadow: 0 0 35px black;\n`;\n","import React, { Component } from \"react\";\nimport Movie from \"./movie\";\nimport styled from 'styled-components';\n\nclass MoviesList extends Component {\n  state = {\n    movies: []\n  };\n  async componentDidMount() {\n    try {\n      const res = await fetch(\n        \"https://api.themoviedb.org/3/discover/movie?api_key=83b3080a4282724fc3258ce56c68be11&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1\"\n      );\n      const movies = await res.json();\n      console.log(movies);\n      this.setState({\n        movies: movies.results\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <MovieGrid>\n        {this.state.movies.map(movie => <Movie key={movie.id} movie={movie} />)}\n      </MovieGrid>\n    ); \n  }\n}\n\nexport default MoviesList;\n\nconst MovieGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(6, 1fr);\n  grid-row-gap: 1rem;\n`;","import React, { Component } from \"react\";\nimport Movie from \"./movie\";\nimport styled from 'styled-components';\nimport { Poster } from './movie';\n\nconst POSTER_PATH = \"http://image.tmdb.org/t/p/w154\";\nconst BACKDROP_PATH = \"http://image.tmdb.org/t/p/w1280\";\n\nclass MovieDetail extends Component {\n  state = {\n    movie: {}\n  };\n  async componentDidMount() {\n    try {\n      const res = await fetch(\n        `https://api.themoviedb.org/3/movie/${\n          this.props.match.params.id\n        }?api_key=83b3080a4282724fc3258ce56c68be11&language=en-US`\n      );\n      const movie = await res.json();\n      this.setState({\n        movie\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n      const {movie} = this.state;\n    return (\n      <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n        <MovieInfo>\n        <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n        <div>\n        <h1>{movie.title}</h1>\n        <p>{movie.release_date}</p>\n        <h3>{movie.overview}</h3>\n        </div>\n        </MovieInfo>\n      </MovieWrapper>\n    );\n  }\n}\n\nexport default MovieDetail;\n\nconst MovieWrapper = styled.div`\n  position: relative;\n  padding-top: 50vh;\n  background: url(${props => props.backdrop }) no-repeat;\n  background-size: cover;\n`;\n\nconst MovieInfo = styled.div`\n  background: white;\n  text-align: left;\n  padding: 2rem 10%;\n  display: flex;\n  > div {\n      margin-left: 20px;\n  }\n  img {\n      position: relative;\n      top: -5rem;\n  }\n`;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router, Route, Switch, Link,\n} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport MoviesList from './movieList';\nimport MovieDetail from './MovieDetail';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </Link>\n      </header>\n      <Switch>\n        <Route exact path=\"/\" component={MoviesList} />\n        <Route path=\"/:id\" component={MovieDetail} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}